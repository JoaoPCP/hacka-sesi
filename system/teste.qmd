---
Title: "Como testar o projeto"
---




---

# üß© Arquitetura

```mermaid
flowchart LR
  subgraph WhatsApp
    U[Usu√°rio]
  end

  subgraph EvolutionAPI["Evolution API"]
    E[(Inst√¢ncia)]
  end

  subgraph n8n
    W[Webhook (entrada)]
    C[Code (normalize)]
    D[(Data Store\\nsessions)]
    S[Switch (step)]
    H[HTTP Request\\n(Evolution API out)]
  end

  U -- mensagem --> E
  E -- webhook POST --> W
  W --> C --> D
  D --> S
  S -->|fluxo| H
  H -- resposta --> E
  E -- WhatsApp --> U
```

**Pontos-chave**
- Cada mensagem recebida no WhatsApp **gera um POST** da Evolution API para o **Webhook de Produ√ß√£o** do n8n.
- O n8n consulta/salva o **estado (step)** por `userId` para continuar o di√°logo.
- O n8n responde via **HTTP Request** para a Evolution API.

---

# ‚úÖ Pr√©-requisitos

- **Servidor Linux** (Ubuntu recomendado) ou n8n.cloud.
- **Dom√≠nio** p√∫blico (ex.: `automacao.suaempresa.com`).
- **SSL/HTTPS** (Let‚Äôs Encrypt via Nginx/Traefik).
- **Docker** e **Docker Compose** instalados.
- Acesso a uma **inst√¢ncia Evolution API** com n√∫mero WhatsApp conectado.

---

# ‚öôÔ∏è Instala√ß√£o do n8n (do zero)

## Instalar Docker e Compose

```bash
sudo apt update
sudo apt install -y docker.io docker-compose
sudo systemctl enable docker --now
docker --version && docker-compose --version
```

## Estrutura do projeto

```bash
mkdir -p ~/n8n && cd ~/n8n
```

Crie `docker-compose.yml`:

```yaml
version: "3.3"

services:
  n8n:
    image: n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha
      - N8N_HOST=automacao.suaempresa.com
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://automacao.suaempresa.com/
    volumes:
      - ~/.n8n:/home/node/.n8n
```

Suba o servi√ßo:

```bash
docker-compose up -d
docker ps --format "table {{.Names}}\t{{.Status}}"
```

Acesse `https://automacao.suaempresa.com:5678` e fa√ßa login.

> **Dica**: Coloque o n8n atr√°s de um **proxy reverso** (Nginx/Traefik) para servir em `:443` sem precisar expor a porta `:5678` publicamente.

---

# ‚öôÔ∏è Instala√ß√£o da Evolution API

> Voc√™ pode rodar localmente ou no mesmo servidor (ajuste portas conforme sua infra).

```bash
git clone https://github.com/EvolutionAPI/evolution-api
cd evolution-api
docker-compose up -d
docker ps --format "table {{.Names}}\t{{.Status}}"
```

Acesse o painel (geralmente `http://<host>:8080`) e:
1. Crie uma **inst√¢ncia** (ex.: `minha-instancia`).
2. Fa√ßa o **pairing/QR Code** com o WhatsApp.
3. Verifique o status **CONNECTED**.

Teste envio:

```bash
curl -X POST http://localhost:8080/message/sendText/minha-instancia \
  -H "Content-Type: application/json" \
  -d '{"to":"557199999999","text":"Teste Evolution API ‚úÖ"}'
```

Se a mensagem chegou, a API est√° operacional.

---

# üîó Integra√ß√£o Evolution API ‚Üí n8n

## Webhook no n8n (Produ√ß√£o)
- Crie um **Webhook Node** no n8n.
- Copie a **Production URL** (ex.: `https://automacao.suaempresa.com/webhook/whatsapp-in`).
- **Ative o workflow** (bot√£o verde *Activate Workflow*).

## Configura√ß√£o no Evolution
- No painel/arquivo de config da Evolution API, configure o **Webhook URL** para a **Production URL** do seu Webhook.
- Agora, **cada mensagem recebida** pelo WhatsApp dispara um **POST** para o n8n.

## Payload t√≠pico recebido

```json
{
  "event": "messages.upsert",
  "instance": "minha-instancia",
  "data": {
    "key": {
      "remoteJid": "557199999999@s.whatsapp.net",
      "fromMe": false,
      "id": "3F81F0F4879BEC31A03B"
    },
    "pushName": "Cliente Teste",
    "message": {
      "conversation": "oi"
    },
    "messageType": "conversation",
    "messageTimestamp": "1732054338"
  }
}
```

---

# üß† Normaliza√ß√£o de entrada (Code Node)

Extrair `userId` e `texto` (considerando bot√µes interativos):

```javascript
const userId = $json.data?.key?.remoteJid;
const text = (
  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||
  $json.data?.message?.conversation ||
  ''
).normalize('NFKD').trim().toLowerCase();

return { userId, text };
```

> Se usar o **Code Node (novo)** do n8n, retorne **um objeto** (n√£o array).

---

# üóÇÔ∏è Persist√™ncia de sess√£o (Data Store)

Crie uma **cole√ß√£o** (ex.: `whatsapp_sessions`) para armazenar o estado por `userId`:

```json
{
  "key": "557199999999@s.whatsapp.net",
  "value": {
    "step": "root",
    "updatedAt": "2025-09-21T12:00:00Z",
    "extra": {}
  }
}
```

**Opera√ß√µes**:
- **Get**: buscar o step atual (por `key = userId`).
- **Upsert**: atualizar `step` e `updatedAt`.
- **Delete**: ao finalizar o atendimento (ou setar `step: done`).

> Para escala/performance, considere usar Redis/Postgres externos.

---

# üß≠ Fluxo de conversa (menu)

## Regras gerais
- `"menu"` sempre volta ao **menu raiz**.
- Se n√£o houver sess√£o ‚Üí assume **menu raiz**.
- Use **bot√µes** sempre que poss√≠vel (menos erro de digita√ß√£o).

## Menu raiz (exemplo de mensagem)
```
Ol√°! Escolha uma op√ß√£o:
1) Suporte
2) Vendas
(Envie "menu" para voltar ao in√≠cio)
```

- Ap√≥s enviar, `Upsert`: `step = "root"`.

## Branch: Suporte
- Se `text === '1'` (no step `root`):
  - Envie:
    ```
    Voc√™ escolheu *Suporte*:
    1) Abrir chamado
    2) Status do chamado
    ```
  - `step = "suporte"`.

- No `step = "suporte"`:
  - `text === '1'` ‚Üí abrir chamado ‚Üí mensagem final ‚Üí **Delete/step=done**.
  - `text === '2'` ‚Üí consultar API ‚Üí responder ‚Üí **step = "root"**.
  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù (mant√©m step).

## Branch: Vendas
- Se `text === '2'` (no step `root`):
  - Envie:
    ```
    Voc√™ escolheu *Vendas*:
    1) Falar com atendente
    2) Cat√°logo
    ```
  - `step = "vendas"`.

- No `step = "vendas"`:
  - `text === '1'` ‚Üí transferir para humano ‚Üí **done**.
  - `text === '2'` ‚Üí enviar cat√°logo/link/PDF ‚Üí **done**.
  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù.

---

# üì§ Envio de mensagens (Evolution API)

## Texto simples

```http
POST http://localhost:8080/message/sendText/minha-instancia
Content-Type: application/json

{
  "to": "557199999999",
  "text": "Ol√°! Escolha uma op√ß√£o:\n1) Suporte\n2) Vendas\n(Envie \"menu\" para voltar)"
}
```

## Bot√µes interativos

```http
POST http://localhost:8080/message/sendButtons/minha-instancia
Content-Type: application/json

{
  "to": "557199999999",
  "text": "Escolha uma op√ß√£o:",
  "buttons": [
    { "buttonId": "1", "buttonText": { "displayText": "Suporte" }, "type": 1 },
    { "buttonId": "2", "buttonText": { "displayText": "Vendas" }, "type": 1 }
  ]
}
```

> **Parsing da resposta**: prefira `selectedButtonId` quando dispon√≠vel; se n√£o, caia para `conversation` (texto livre).

---

# üè≠ Colocando em produ√ß√£o

1. **Ativar** o workflow no n8n (Production URL do Webhook passa a responder).
2. Configurar o **Webhook URL** da Evolution API para a **Production URL**.
3. Garantir **HTTPS/SSL** v√°lido (obrigat√≥rio para webhooks externos).
4. **Persist√™ncia**: garanta volume de dados (`~/.n8n`) e backup regular.
5. **Logs/Execu√ß√µes**: habilite salvamento de execu√ß√µes para auditoria/debug.
6. **Timeout de sess√£o**: se `updatedAt` for mais antigo que _X_ minutos, resete para `root`.
7. **Prote√ß√£o**: autentica√ß√£o b√°sica no n8n + firewall/seguran√ßa do host.

---

# üß™ Testes e troubleshooting

- **Webhook n√£o dispara**:
  - Workflow est√° **ativado**?
  - Evolution aponta para a **Production URL**?
  - HTTPS v√°lido e acess√≠vel externamente?
- **Mensagem n√£o chega**:
  - Verifique resposta do **HTTP Request Node**.
  - A inst√¢ncia Evolution est√° **CONNECTED**?
- **Estado perdido** ap√≥s restart:
  - Volume `~/.n8n` montado?
  - Considere Data Store externo (Redis/Postgres).
- **Loop infinito**:
  - Sempre tenha **condi√ß√£o de sa√≠da** e trate op√ß√µes inv√°lidas.

---

# üõ°Ô∏è Boas pr√°ticas

- Normalizar inputs (`toLowerCase`, remover acentos com `normalize('NFKD')`).
- Sempre oferecer ‚Äú**menu**‚Äù para reset r√°pido.
- Preferir **bot√µes** a texto livre.
- Validar e **n√£o avan√ßar step** em caso de input inv√°lido.
- Monitorar filas/erros no n8n e na Evolution API.
- Versionar workflows exportados (`.json`) em reposit√≥rio (Git).

---

# üìé Ap√™ndice A ‚Äî Snippets √∫teis (n8n)

## Code (normalize)

```javascript
const userId = $json.data?.key?.remoteJid;
const text = (
  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||
  $json.data?.message?.conversation ||
  ''
).normalize('NFKD').trim().toLowerCase();

return { userId, text };
```

## Upsert (Data Store ‚Üí sessions)

```json
{
  "key": "={{$json.userId}}",
  "value": {
    "step": "={{$json.nextStep}}",
    "updatedAt": "={{ new Date().toISOString() }}"
  }
}
```

## IF (sem sess√£o ou pediu menu)

```javascript
{{ !($json.data && $json.data.value && $json.data.value.step) || $json.text === 'menu' }}
```

---

# üìé Ap√™ndice B ‚Äî docker-compose (exemplo)

```yaml
version: "3.3"

services:
  proxy:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--certificatesresolvers.le.acme.email=devops@suaempresa.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"

  n8n:
    image: n8nio/n8n
    restart: always
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha
      - N8N_HOST=automacao.suaempresa.com
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://automacao.suaempresa.com/
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`automacao.suaempresa.com`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=le"
    volumes:
      - ~/.n8n:/home/node/.n8n

  evolution:
    image: <imagem-da-evolution-api>
    restart: always
    ports:
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.evolution.rule=Host(`evolution.suaempresa.com`)"
      - "traefik.http.routers.evolution.entrypoints=websecure"
      - "traefik.http.routers.evolution.tls.certresolver=le"
    environment:
      - NODE_ENV=production
    volumes:
      - ./evolution-data:/data
```

> **Observa√ß√£o**: substitua `<imagem-da-evolution-api>` pela imagem/container oficial que voc√™ estiver utilizando.

---

# üßæ Checklist de Go‚ÄëLive

- [ ] DNS e SSL v√°lidos (n8n + Evolution).
- [ ] Workflow **ativado** (Production URL em uso).
- [ ] Webhook configurado na Evolution API.
- [ ] Testes ponta-a-ponta (receber ‚Üí processar ‚Üí responder).
- [ ] Persist√™ncia e backups funcionando.
- [ ] Observabilidade (logs, execu√ß√µes salvas, alertas).
- [ ] Plano de rollback/export do workflow (.json) versionado.

---



