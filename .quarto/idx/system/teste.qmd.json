{"title":"üß© Arquitetura","markdown":{"yaml":{"Title":"Como testar o projeto"},"headingText":"üß© Arquitetura","containsRefs":false,"markdown":"\n\n\n\n\n---\n\n\n```mermaid\nflowchart LR\n  subgraph WhatsApp\n    U[Usu√°rio]\n  end\n\n  subgraph EvolutionAPI[\"Evolution API\"]\n    E[(Inst√¢ncia)]\n  end\n\n  subgraph n8n\n    W[Webhook (entrada)]\n    C[Code (normalize)]\n    D[(Data Store\\\\nsessions)]\n    S[Switch (step)]\n    H[HTTP Request\\\\n(Evolution API out)]\n  end\n\n  U -- mensagem --> E\n  E -- webhook POST --> W\n  W --> C --> D\n  D --> S\n  S -->|fluxo| H\n  H -- resposta --> E\n  E -- WhatsApp --> U\n```\n\n**Pontos-chave**\n- Cada mensagem recebida no WhatsApp **gera um POST** da Evolution API para o **Webhook de Produ√ß√£o** do n8n.\n- O n8n consulta/salva o **estado (step)** por `userId` para continuar o di√°logo.\n- O n8n responde via **HTTP Request** para a Evolution API.\n\n---\n\n# ‚úÖ Pr√©-requisitos\n\n- **Servidor Linux** (Ubuntu recomendado) ou n8n.cloud.\n- **Dom√≠nio** p√∫blico (ex.: `automacao.suaempresa.com`).\n- **SSL/HTTPS** (Let‚Äôs Encrypt via Nginx/Traefik).\n- **Docker** e **Docker Compose** instalados.\n- Acesso a uma **inst√¢ncia Evolution API** com n√∫mero WhatsApp conectado.\n\n---\n\n# ‚öôÔ∏è Instala√ß√£o do n8n (do zero)\n\n## Instalar Docker e Compose\n\n```bash\nsudo apt update\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable docker --now\ndocker --version && docker-compose --version\n```\n\n## Estrutura do projeto\n\n```bash\nmkdir -p ~/n8n && cd ~/n8n\n```\n\nCrie `docker-compose.yml`:\n\n```yaml\nversion: \"3.3\"\n\nservices:\n  n8n:\n    image: n8nio/n8n\n    restart: always\n    ports:\n      - \"5678:5678\"\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha\n      - N8N_HOST=automacao.suaempresa.com\n      - N8N_PROTOCOL=https\n      - WEBHOOK_URL=https://automacao.suaempresa.com/\n    volumes:\n      - ~/.n8n:/home/node/.n8n\n```\n\nSuba o servi√ßo:\n\n```bash\ndocker-compose up -d\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n```\n\nAcesse `https://automacao.suaempresa.com:5678` e fa√ßa login.\n\n> **Dica**: Coloque o n8n atr√°s de um **proxy reverso** (Nginx/Traefik) para servir em `:443` sem precisar expor a porta `:5678` publicamente.\n\n---\n\n# ‚öôÔ∏è Instala√ß√£o da Evolution API\n\n> Voc√™ pode rodar localmente ou no mesmo servidor (ajuste portas conforme sua infra).\n\n```bash\ngit clone https://github.com/EvolutionAPI/evolution-api\ncd evolution-api\ndocker-compose up -d\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n```\n\nAcesse o painel (geralmente `http://<host>:8080`) e:\n1. Crie uma **inst√¢ncia** (ex.: `minha-instancia`).\n2. Fa√ßa o **pairing/QR Code** com o WhatsApp.\n3. Verifique o status **CONNECTED**.\n\nTeste envio:\n\n```bash\ncurl -X POST http://localhost:8080/message/sendText/minha-instancia \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"to\":\"557199999999\",\"text\":\"Teste Evolution API ‚úÖ\"}'\n```\n\nSe a mensagem chegou, a API est√° operacional.\n\n---\n\n# üîó Integra√ß√£o Evolution API ‚Üí n8n\n\n## Webhook no n8n (Produ√ß√£o)\n- Crie um **Webhook Node** no n8n.\n- Copie a **Production URL** (ex.: `https://automacao.suaempresa.com/webhook/whatsapp-in`).\n- **Ative o workflow** (bot√£o verde *Activate Workflow*).\n\n## Configura√ß√£o no Evolution\n- No painel/arquivo de config da Evolution API, configure o **Webhook URL** para a **Production URL** do seu Webhook.\n- Agora, **cada mensagem recebida** pelo WhatsApp dispara um **POST** para o n8n.\n\n## Payload t√≠pico recebido\n\n```json\n{\n  \"event\": \"messages.upsert\",\n  \"instance\": \"minha-instancia\",\n  \"data\": {\n    \"key\": {\n      \"remoteJid\": \"557199999999@s.whatsapp.net\",\n      \"fromMe\": false,\n      \"id\": \"3F81F0F4879BEC31A03B\"\n    },\n    \"pushName\": \"Cliente Teste\",\n    \"message\": {\n      \"conversation\": \"oi\"\n    },\n    \"messageType\": \"conversation\",\n    \"messageTimestamp\": \"1732054338\"\n  }\n}\n```\n\n---\n\n# üß† Normaliza√ß√£o de entrada (Code Node)\n\nExtrair `userId` e `texto` (considerando bot√µes interativos):\n\n```javascript\nconst userId = $json.data?.key?.remoteJid;\nconst text = (\n  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||\n  $json.data?.message?.conversation ||\n  ''\n).normalize('NFKD').trim().toLowerCase();\n\nreturn { userId, text };\n```\n\n> Se usar o **Code Node (novo)** do n8n, retorne **um objeto** (n√£o array).\n\n---\n\n# üóÇÔ∏è Persist√™ncia de sess√£o (Data Store)\n\nCrie uma **cole√ß√£o** (ex.: `whatsapp_sessions`) para armazenar o estado por `userId`:\n\n```json\n{\n  \"key\": \"557199999999@s.whatsapp.net\",\n  \"value\": {\n    \"step\": \"root\",\n    \"updatedAt\": \"2025-09-21T12:00:00Z\",\n    \"extra\": {}\n  }\n}\n```\n\n**Opera√ß√µes**:\n- **Get**: buscar o step atual (por `key = userId`).\n- **Upsert**: atualizar `step` e `updatedAt`.\n- **Delete**: ao finalizar o atendimento (ou setar `step: done`).\n\n> Para escala/performance, considere usar Redis/Postgres externos.\n\n---\n\n# üß≠ Fluxo de conversa (menu)\n\n## Regras gerais\n- `\"menu\"` sempre volta ao **menu raiz**.\n- Se n√£o houver sess√£o ‚Üí assume **menu raiz**.\n- Use **bot√µes** sempre que poss√≠vel (menos erro de digita√ß√£o).\n\n## Menu raiz (exemplo de mensagem)\n```\nOl√°! Escolha uma op√ß√£o:\n1) Suporte\n2) Vendas\n(Envie \"menu\" para voltar ao in√≠cio)\n```\n\n- Ap√≥s enviar, `Upsert`: `step = \"root\"`.\n\n## Branch: Suporte\n- Se `text === '1'` (no step `root`):\n  - Envie:\n    ```\n    Voc√™ escolheu *Suporte*:\n    1) Abrir chamado\n    2) Status do chamado\n    ```\n  - `step = \"suporte\"`.\n\n- No `step = \"suporte\"`:\n  - `text === '1'` ‚Üí abrir chamado ‚Üí mensagem final ‚Üí **Delete/step=done**.\n  - `text === '2'` ‚Üí consultar API ‚Üí responder ‚Üí **step = \"root\"**.\n  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù (mant√©m step).\n\n## Branch: Vendas\n- Se `text === '2'` (no step `root`):\n  - Envie:\n    ```\n    Voc√™ escolheu *Vendas*:\n    1) Falar com atendente\n    2) Cat√°logo\n    ```\n  - `step = \"vendas\"`.\n\n- No `step = \"vendas\"`:\n  - `text === '1'` ‚Üí transferir para humano ‚Üí **done**.\n  - `text === '2'` ‚Üí enviar cat√°logo/link/PDF ‚Üí **done**.\n  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù.\n\n---\n\n# üì§ Envio de mensagens (Evolution API)\n\n## Texto simples\n\n```http\nPOST http://localhost:8080/message/sendText/minha-instancia\nContent-Type: application/json\n\n{\n  \"to\": \"557199999999\",\n  \"text\": \"Ol√°! Escolha uma op√ß√£o:\\n1) Suporte\\n2) Vendas\\n(Envie \\\"menu\\\" para voltar)\"\n}\n```\n\n## Bot√µes interativos\n\n```http\nPOST http://localhost:8080/message/sendButtons/minha-instancia\nContent-Type: application/json\n\n{\n  \"to\": \"557199999999\",\n  \"text\": \"Escolha uma op√ß√£o:\",\n  \"buttons\": [\n    { \"buttonId\": \"1\", \"buttonText\": { \"displayText\": \"Suporte\" }, \"type\": 1 },\n    { \"buttonId\": \"2\", \"buttonText\": { \"displayText\": \"Vendas\" }, \"type\": 1 }\n  ]\n}\n```\n\n> **Parsing da resposta**: prefira `selectedButtonId` quando dispon√≠vel; se n√£o, caia para `conversation` (texto livre).\n\n---\n\n# üè≠ Colocando em produ√ß√£o\n\n1. **Ativar** o workflow no n8n (Production URL do Webhook passa a responder).\n2. Configurar o **Webhook URL** da Evolution API para a **Production URL**.\n3. Garantir **HTTPS/SSL** v√°lido (obrigat√≥rio para webhooks externos).\n4. **Persist√™ncia**: garanta volume de dados (`~/.n8n`) e backup regular.\n5. **Logs/Execu√ß√µes**: habilite salvamento de execu√ß√µes para auditoria/debug.\n6. **Timeout de sess√£o**: se `updatedAt` for mais antigo que _X_ minutos, resete para `root`.\n7. **Prote√ß√£o**: autentica√ß√£o b√°sica no n8n + firewall/seguran√ßa do host.\n\n---\n\n# üß™ Testes e troubleshooting\n\n- **Webhook n√£o dispara**:\n  - Workflow est√° **ativado**?\n  - Evolution aponta para a **Production URL**?\n  - HTTPS v√°lido e acess√≠vel externamente?\n- **Mensagem n√£o chega**:\n  - Verifique resposta do **HTTP Request Node**.\n  - A inst√¢ncia Evolution est√° **CONNECTED**?\n- **Estado perdido** ap√≥s restart:\n  - Volume `~/.n8n` montado?\n  - Considere Data Store externo (Redis/Postgres).\n- **Loop infinito**:\n  - Sempre tenha **condi√ß√£o de sa√≠da** e trate op√ß√µes inv√°lidas.\n\n---\n\n# üõ°Ô∏è Boas pr√°ticas\n\n- Normalizar inputs (`toLowerCase`, remover acentos com `normalize('NFKD')`).\n- Sempre oferecer ‚Äú**menu**‚Äù para reset r√°pido.\n- Preferir **bot√µes** a texto livre.\n- Validar e **n√£o avan√ßar step** em caso de input inv√°lido.\n- Monitorar filas/erros no n8n e na Evolution API.\n- Versionar workflows exportados (`.json`) em reposit√≥rio (Git).\n\n---\n\n# üìé Ap√™ndice A ‚Äî Snippets √∫teis (n8n)\n\n## Code (normalize)\n\n```javascript\nconst userId = $json.data?.key?.remoteJid;\nconst text = (\n  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||\n  $json.data?.message?.conversation ||\n  ''\n).normalize('NFKD').trim().toLowerCase();\n\nreturn { userId, text };\n```\n\n## Upsert (Data Store ‚Üí sessions)\n\n```json\n{\n  \"key\": \"={{$json.userId}}\",\n  \"value\": {\n    \"step\": \"={{$json.nextStep}}\",\n    \"updatedAt\": \"={{ new Date().toISOString() }}\"\n  }\n}\n```\n\n## IF (sem sess√£o ou pediu menu)\n\n```javascript\n{{ !($json.data && $json.data.value && $json.data.value.step) || $json.text === 'menu' }}\n```\n\n---\n\n# üìé Ap√™ndice B ‚Äî docker-compose (exemplo)\n\n```yaml\nversion: \"3.3\"\n\nservices:\n  proxy:\n    image: traefik:v3.0\n    command:\n      - \"--api.dashboard=true\"\n      - \"--providers.docker=true\"\n      - \"--entrypoints.web.address=:80\"\n      - \"--entrypoints.websecure.address=:443\"\n      - \"--certificatesresolvers.le.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.le.acme.email=devops@suaempresa.com\"\n      - \"--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./letsencrypt:/letsencrypt\"\n\n  n8n:\n    image: n8nio/n8n\n    restart: always\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha\n      - N8N_HOST=automacao.suaempresa.com\n      - N8N_PROTOCOL=https\n      - WEBHOOK_URL=https://automacao.suaempresa.com/\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.n8n.rule=Host(`automacao.suaempresa.com`)\"\n      - \"traefik.http.routers.n8n.entrypoints=websecure\"\n      - \"traefik.http.routers.n8n.tls.certresolver=le\"\n    volumes:\n      - ~/.n8n:/home/node/.n8n\n\n  evolution:\n    image: <imagem-da-evolution-api>\n    restart: always\n    ports:\n      - \"8080:8080\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.evolution.rule=Host(`evolution.suaempresa.com`)\"\n      - \"traefik.http.routers.evolution.entrypoints=websecure\"\n      - \"traefik.http.routers.evolution.tls.certresolver=le\"\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./evolution-data:/data\n```\n\n> **Observa√ß√£o**: substitua `<imagem-da-evolution-api>` pela imagem/container oficial que voc√™ estiver utilizando.\n\n---\n\n# üßæ Checklist de Go‚ÄëLive\n\n- [ ] DNS e SSL v√°lidos (n8n + Evolution).\n- [ ] Workflow **ativado** (Production URL em uso).\n- [ ] Webhook configurado na Evolution API.\n- [ ] Testes ponta-a-ponta (receber ‚Üí processar ‚Üí responder).\n- [ ] Persist√™ncia e backups funcionando.\n- [ ] Observabilidade (logs, execu√ß√µes salvas, alertas).\n- [ ] Plano de rollback/export do workflow (.json) versionado.\n\n---\n\n\n\n","srcMarkdownNoYaml":"\n\n\n\n\n---\n\n# üß© Arquitetura\n\n```mermaid\nflowchart LR\n  subgraph WhatsApp\n    U[Usu√°rio]\n  end\n\n  subgraph EvolutionAPI[\"Evolution API\"]\n    E[(Inst√¢ncia)]\n  end\n\n  subgraph n8n\n    W[Webhook (entrada)]\n    C[Code (normalize)]\n    D[(Data Store\\\\nsessions)]\n    S[Switch (step)]\n    H[HTTP Request\\\\n(Evolution API out)]\n  end\n\n  U -- mensagem --> E\n  E -- webhook POST --> W\n  W --> C --> D\n  D --> S\n  S -->|fluxo| H\n  H -- resposta --> E\n  E -- WhatsApp --> U\n```\n\n**Pontos-chave**\n- Cada mensagem recebida no WhatsApp **gera um POST** da Evolution API para o **Webhook de Produ√ß√£o** do n8n.\n- O n8n consulta/salva o **estado (step)** por `userId` para continuar o di√°logo.\n- O n8n responde via **HTTP Request** para a Evolution API.\n\n---\n\n# ‚úÖ Pr√©-requisitos\n\n- **Servidor Linux** (Ubuntu recomendado) ou n8n.cloud.\n- **Dom√≠nio** p√∫blico (ex.: `automacao.suaempresa.com`).\n- **SSL/HTTPS** (Let‚Äôs Encrypt via Nginx/Traefik).\n- **Docker** e **Docker Compose** instalados.\n- Acesso a uma **inst√¢ncia Evolution API** com n√∫mero WhatsApp conectado.\n\n---\n\n# ‚öôÔ∏è Instala√ß√£o do n8n (do zero)\n\n## Instalar Docker e Compose\n\n```bash\nsudo apt update\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable docker --now\ndocker --version && docker-compose --version\n```\n\n## Estrutura do projeto\n\n```bash\nmkdir -p ~/n8n && cd ~/n8n\n```\n\nCrie `docker-compose.yml`:\n\n```yaml\nversion: \"3.3\"\n\nservices:\n  n8n:\n    image: n8nio/n8n\n    restart: always\n    ports:\n      - \"5678:5678\"\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha\n      - N8N_HOST=automacao.suaempresa.com\n      - N8N_PROTOCOL=https\n      - WEBHOOK_URL=https://automacao.suaempresa.com/\n    volumes:\n      - ~/.n8n:/home/node/.n8n\n```\n\nSuba o servi√ßo:\n\n```bash\ndocker-compose up -d\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n```\n\nAcesse `https://automacao.suaempresa.com:5678` e fa√ßa login.\n\n> **Dica**: Coloque o n8n atr√°s de um **proxy reverso** (Nginx/Traefik) para servir em `:443` sem precisar expor a porta `:5678` publicamente.\n\n---\n\n# ‚öôÔ∏è Instala√ß√£o da Evolution API\n\n> Voc√™ pode rodar localmente ou no mesmo servidor (ajuste portas conforme sua infra).\n\n```bash\ngit clone https://github.com/EvolutionAPI/evolution-api\ncd evolution-api\ndocker-compose up -d\ndocker ps --format \"table {{.Names}}\\t{{.Status}}\"\n```\n\nAcesse o painel (geralmente `http://<host>:8080`) e:\n1. Crie uma **inst√¢ncia** (ex.: `minha-instancia`).\n2. Fa√ßa o **pairing/QR Code** com o WhatsApp.\n3. Verifique o status **CONNECTED**.\n\nTeste envio:\n\n```bash\ncurl -X POST http://localhost:8080/message/sendText/minha-instancia \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"to\":\"557199999999\",\"text\":\"Teste Evolution API ‚úÖ\"}'\n```\n\nSe a mensagem chegou, a API est√° operacional.\n\n---\n\n# üîó Integra√ß√£o Evolution API ‚Üí n8n\n\n## Webhook no n8n (Produ√ß√£o)\n- Crie um **Webhook Node** no n8n.\n- Copie a **Production URL** (ex.: `https://automacao.suaempresa.com/webhook/whatsapp-in`).\n- **Ative o workflow** (bot√£o verde *Activate Workflow*).\n\n## Configura√ß√£o no Evolution\n- No painel/arquivo de config da Evolution API, configure o **Webhook URL** para a **Production URL** do seu Webhook.\n- Agora, **cada mensagem recebida** pelo WhatsApp dispara um **POST** para o n8n.\n\n## Payload t√≠pico recebido\n\n```json\n{\n  \"event\": \"messages.upsert\",\n  \"instance\": \"minha-instancia\",\n  \"data\": {\n    \"key\": {\n      \"remoteJid\": \"557199999999@s.whatsapp.net\",\n      \"fromMe\": false,\n      \"id\": \"3F81F0F4879BEC31A03B\"\n    },\n    \"pushName\": \"Cliente Teste\",\n    \"message\": {\n      \"conversation\": \"oi\"\n    },\n    \"messageType\": \"conversation\",\n    \"messageTimestamp\": \"1732054338\"\n  }\n}\n```\n\n---\n\n# üß† Normaliza√ß√£o de entrada (Code Node)\n\nExtrair `userId` e `texto` (considerando bot√µes interativos):\n\n```javascript\nconst userId = $json.data?.key?.remoteJid;\nconst text = (\n  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||\n  $json.data?.message?.conversation ||\n  ''\n).normalize('NFKD').trim().toLowerCase();\n\nreturn { userId, text };\n```\n\n> Se usar o **Code Node (novo)** do n8n, retorne **um objeto** (n√£o array).\n\n---\n\n# üóÇÔ∏è Persist√™ncia de sess√£o (Data Store)\n\nCrie uma **cole√ß√£o** (ex.: `whatsapp_sessions`) para armazenar o estado por `userId`:\n\n```json\n{\n  \"key\": \"557199999999@s.whatsapp.net\",\n  \"value\": {\n    \"step\": \"root\",\n    \"updatedAt\": \"2025-09-21T12:00:00Z\",\n    \"extra\": {}\n  }\n}\n```\n\n**Opera√ß√µes**:\n- **Get**: buscar o step atual (por `key = userId`).\n- **Upsert**: atualizar `step` e `updatedAt`.\n- **Delete**: ao finalizar o atendimento (ou setar `step: done`).\n\n> Para escala/performance, considere usar Redis/Postgres externos.\n\n---\n\n# üß≠ Fluxo de conversa (menu)\n\n## Regras gerais\n- `\"menu\"` sempre volta ao **menu raiz**.\n- Se n√£o houver sess√£o ‚Üí assume **menu raiz**.\n- Use **bot√µes** sempre que poss√≠vel (menos erro de digita√ß√£o).\n\n## Menu raiz (exemplo de mensagem)\n```\nOl√°! Escolha uma op√ß√£o:\n1) Suporte\n2) Vendas\n(Envie \"menu\" para voltar ao in√≠cio)\n```\n\n- Ap√≥s enviar, `Upsert`: `step = \"root\"`.\n\n## Branch: Suporte\n- Se `text === '1'` (no step `root`):\n  - Envie:\n    ```\n    Voc√™ escolheu *Suporte*:\n    1) Abrir chamado\n    2) Status do chamado\n    ```\n  - `step = \"suporte\"`.\n\n- No `step = \"suporte\"`:\n  - `text === '1'` ‚Üí abrir chamado ‚Üí mensagem final ‚Üí **Delete/step=done**.\n  - `text === '2'` ‚Üí consultar API ‚Üí responder ‚Üí **step = \"root\"**.\n  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù (mant√©m step).\n\n## Branch: Vendas\n- Se `text === '2'` (no step `root`):\n  - Envie:\n    ```\n    Voc√™ escolheu *Vendas*:\n    1) Falar com atendente\n    2) Cat√°logo\n    ```\n  - `step = \"vendas\"`.\n\n- No `step = \"vendas\"`:\n  - `text === '1'` ‚Üí transferir para humano ‚Üí **done**.\n  - `text === '2'` ‚Üí enviar cat√°logo/link/PDF ‚Üí **done**.\n  - Outro ‚Üí ‚ÄúOp√ß√£o inv√°lida‚Äù.\n\n---\n\n# üì§ Envio de mensagens (Evolution API)\n\n## Texto simples\n\n```http\nPOST http://localhost:8080/message/sendText/minha-instancia\nContent-Type: application/json\n\n{\n  \"to\": \"557199999999\",\n  \"text\": \"Ol√°! Escolha uma op√ß√£o:\\n1) Suporte\\n2) Vendas\\n(Envie \\\"menu\\\" para voltar)\"\n}\n```\n\n## Bot√µes interativos\n\n```http\nPOST http://localhost:8080/message/sendButtons/minha-instancia\nContent-Type: application/json\n\n{\n  \"to\": \"557199999999\",\n  \"text\": \"Escolha uma op√ß√£o:\",\n  \"buttons\": [\n    { \"buttonId\": \"1\", \"buttonText\": { \"displayText\": \"Suporte\" }, \"type\": 1 },\n    { \"buttonId\": \"2\", \"buttonText\": { \"displayText\": \"Vendas\" }, \"type\": 1 }\n  ]\n}\n```\n\n> **Parsing da resposta**: prefira `selectedButtonId` quando dispon√≠vel; se n√£o, caia para `conversation` (texto livre).\n\n---\n\n# üè≠ Colocando em produ√ß√£o\n\n1. **Ativar** o workflow no n8n (Production URL do Webhook passa a responder).\n2. Configurar o **Webhook URL** da Evolution API para a **Production URL**.\n3. Garantir **HTTPS/SSL** v√°lido (obrigat√≥rio para webhooks externos).\n4. **Persist√™ncia**: garanta volume de dados (`~/.n8n`) e backup regular.\n5. **Logs/Execu√ß√µes**: habilite salvamento de execu√ß√µes para auditoria/debug.\n6. **Timeout de sess√£o**: se `updatedAt` for mais antigo que _X_ minutos, resete para `root`.\n7. **Prote√ß√£o**: autentica√ß√£o b√°sica no n8n + firewall/seguran√ßa do host.\n\n---\n\n# üß™ Testes e troubleshooting\n\n- **Webhook n√£o dispara**:\n  - Workflow est√° **ativado**?\n  - Evolution aponta para a **Production URL**?\n  - HTTPS v√°lido e acess√≠vel externamente?\n- **Mensagem n√£o chega**:\n  - Verifique resposta do **HTTP Request Node**.\n  - A inst√¢ncia Evolution est√° **CONNECTED**?\n- **Estado perdido** ap√≥s restart:\n  - Volume `~/.n8n` montado?\n  - Considere Data Store externo (Redis/Postgres).\n- **Loop infinito**:\n  - Sempre tenha **condi√ß√£o de sa√≠da** e trate op√ß√µes inv√°lidas.\n\n---\n\n# üõ°Ô∏è Boas pr√°ticas\n\n- Normalizar inputs (`toLowerCase`, remover acentos com `normalize('NFKD')`).\n- Sempre oferecer ‚Äú**menu**‚Äù para reset r√°pido.\n- Preferir **bot√µes** a texto livre.\n- Validar e **n√£o avan√ßar step** em caso de input inv√°lido.\n- Monitorar filas/erros no n8n e na Evolution API.\n- Versionar workflows exportados (`.json`) em reposit√≥rio (Git).\n\n---\n\n# üìé Ap√™ndice A ‚Äî Snippets √∫teis (n8n)\n\n## Code (normalize)\n\n```javascript\nconst userId = $json.data?.key?.remoteJid;\nconst text = (\n  $json.data?.message?.buttonsResponseMessage?.selectedButtonId ||\n  $json.data?.message?.conversation ||\n  ''\n).normalize('NFKD').trim().toLowerCase();\n\nreturn { userId, text };\n```\n\n## Upsert (Data Store ‚Üí sessions)\n\n```json\n{\n  \"key\": \"={{$json.userId}}\",\n  \"value\": {\n    \"step\": \"={{$json.nextStep}}\",\n    \"updatedAt\": \"={{ new Date().toISOString() }}\"\n  }\n}\n```\n\n## IF (sem sess√£o ou pediu menu)\n\n```javascript\n{{ !($json.data && $json.data.value && $json.data.value.step) || $json.text === 'menu' }}\n```\n\n---\n\n# üìé Ap√™ndice B ‚Äî docker-compose (exemplo)\n\n```yaml\nversion: \"3.3\"\n\nservices:\n  proxy:\n    image: traefik:v3.0\n    command:\n      - \"--api.dashboard=true\"\n      - \"--providers.docker=true\"\n      - \"--entrypoints.web.address=:80\"\n      - \"--entrypoints.websecure.address=:443\"\n      - \"--certificatesresolvers.le.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.le.acme.email=devops@suaempresa.com\"\n      - \"--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./letsencrypt:/letsencrypt\"\n\n  n8n:\n    image: n8nio/n8n\n    restart: always\n    environment:\n      - N8N_BASIC_AUTH_ACTIVE=true\n      - N8N_BASIC_AUTH_USER=admin\n      - N8N_BASIC_AUTH_PASSWORD=troque-esta-senha\n      - N8N_HOST=automacao.suaempresa.com\n      - N8N_PROTOCOL=https\n      - WEBHOOK_URL=https://automacao.suaempresa.com/\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.n8n.rule=Host(`automacao.suaempresa.com`)\"\n      - \"traefik.http.routers.n8n.entrypoints=websecure\"\n      - \"traefik.http.routers.n8n.tls.certresolver=le\"\n    volumes:\n      - ~/.n8n:/home/node/.n8n\n\n  evolution:\n    image: <imagem-da-evolution-api>\n    restart: always\n    ports:\n      - \"8080:8080\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.evolution.rule=Host(`evolution.suaempresa.com`)\"\n      - \"traefik.http.routers.evolution.entrypoints=websecure\"\n      - \"traefik.http.routers.evolution.tls.certresolver=le\"\n    environment:\n      - NODE_ENV=production\n    volumes:\n      - ./evolution-data:/data\n```\n\n> **Observa√ß√£o**: substitua `<imagem-da-evolution-api>` pela imagem/container oficial que voc√™ estiver utilizando.\n\n---\n\n# üßæ Checklist de Go‚ÄëLive\n\n- [ ] DNS e SSL v√°lidos (n8n + Evolution).\n- [ ] Workflow **ativado** (Production URL em uso).\n- [ ] Webhook configurado na Evolution API.\n- [ ] Testes ponta-a-ponta (receber ‚Üí processar ‚Üí responder).\n- [ ] Persist√™ncia e backups funcionando.\n- [ ] Observabilidade (logs, execu√ß√µes salvas, alertas).\n- [ ] Plano de rollback/export do workflow (.json) versionado.\n\n---\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"teste.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","theme":["cosmo","brand"],"Title":"Como testar o projeto"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}